<?xml version=”1.0” encoding=”UTF-8” ?>
<rss version="2.0">
<channel>
<title> Mysore Linux Users' Group </title>
<link> https://mysorelug.indriyallc.net </link>
<description>
A website for Linux users and geeks in general to express their thoughts and spread information
</description>
<item>
<title>Building My First Docker Container</title>
<link>
https://mysorelug.indriyallc.net/articles/2022/01/building-docker-container/index.html
</link>
<description> <p class="article-paragraph">
Docker containers are a pretty cool way to deploy programs.
I've used other peoples' docker contairs quite a bit, but now wanted to make my own. Here's how that went.
</p>


<p class="article-paragraph">
I tried packaging an IRC bot I had written in go, the <a href="https://bitbucket.org/pvpublic/uptodatebot/src/master/">UpToDateBot</a>.
What it does isn't super relevant. Its needs are very simple, making it a good choice for my first container.
It needs one config file, <code>config.yaml</code> in <code>/etc/uptodatebot</code>. It doesn't need any ports exposed to it.
</p>


<p class="article-paragraph">
To get a complete docker container from my go source code, I would need to first build the code, then copy it over to a container. The config file stuff can all be handled when running the container, since the config file resides on my host's filesystem anyway.
</p>


<p class="article-paragraph">
At first, I thought I would start easy by building the executable on my host machine, and copying the binary to the root of the container in my Dockerfile. I had heard of Alpine Linux being one of the lightest options for container OSs, so I went with that.
Here's what I started with in my Dockerfile:
</p>


<p class="article-paragraph"><div class="article-code"><code>FROM alpine:latest


COPY ./UpToDateBot /


RUN mkdir /etc/uptodatebot


WORKDIR /etc/uptodatebot
CMD [ "/UpToDateBot" ]</code></div></p>


<p class="article-paragraph">
I set the <code>WORKDIR</code> to <code>/etc/uptodatebot</code> because that's where I intended to put the config file, and the executable searches for it only in the directory in which it is run.
</p>


<p class="article-paragraph">
Building and running:
</p>


<p class="article-paragraph"><div class="article-code"><code>docker build -t uptodatebot .
docker run -v $PWD/config.yaml:/etc/uptodatebot/config.yaml uptodatebot</code></div></p>


<p class="article-paragraph">
Now of course, this didn't work at all. Alpine just complained that it couldn't find the executable.
</p>


<p class="article-paragraph"><div class="article-code"><code>exec /UpToDateBot: no such file or directory</code></div></p>


<p class="article-paragraph">
When running with the interactive shell flag (<code>docker run -v ... -it uptodatebot sh</code>), I found out that the executable had indeed been copied correctly.
I then remembered the memes about Alpine not being GNU/Linux. <em>Of course!</em>
</p>


<p class="article-paragraph">
I had build my executable on my openSUSE Tumbleweed machine, which uses <code>glibc</code>. Alpine doesn't use GNU software, so it has <code>musl</code>. It can't run executables that link to <code>glibc</code> like mine does.
I'm guessing that the vague error was due to the lightweight nature of Alpine
</p>


<p class="article-paragraph">
I then tried the next best thing, by building the container <code>FROM debian:latest</code> instead. That too failed, this time because openSUSE's <code>glibc</code> version is newer than, and incompatible with, the version shipped with Debian.
Building the container <code>FROM opensuse/tumbleweed:latest</code>, it worked!
</p>


<p class="article-paragraph">
But this was just the first step. I wanted a full build setup that built the executable binary in one container and copied the executables to a final one, so that things would largely be architecture-agnostic, and not dependent on the host machine's OS.
I stubled upon the <code>golang</code> container, which contained a full environment for building, with tools like git preinstalled.
All I had to do was create a directory for my build, clone the git repo, build the executable, and copy it over to a fresh container. This was done pretty easily, after some research.
I took the opportunity to add a personal touch to the product too.
</p>


<p class="article-paragraph"><div class="article-code"><code>FROM golang:latest as buildcontainer


WORKDIR /build
RUN git clone https://PrithviVishak@bitbucket.org/pvpublic/uptodatebot.git
WORKDIR /build/uptodatebot
RUN go build -o UpToDateBot


FROM debian:latest
LABEL maintainer="Prithvi Vishak <prithvivishak@gmail.com>"


COPY --from=buildcontainer /build/uptodatebot/UpToDateBot /


WORKDIR /etc/uptodatebot
CMD [ "/UpToDateBot" ]</code></div></p>


<p class="article-paragraph">
As it turns out, the golang container's <code>glibc</code> version is compatible with Debian's. This was near ideal. The last thing I wanted was it to run in Alpine.
After yet more research, I found that Alpine has a package called <code>gcompat</code>, which allows <code>glibc</code> programs to run properly. And indeed it did. Here's the final result:
</p>


<p class="article-paragraph"><div class="article-code"><code>FROM golang:latest as buildcontainer


WORKDIR /build
RUN git clone https://PrithviVishak@bitbucket.org/pvpublic/uptodatebot.git
WORKDIR /build/uptodatebot
RUN go build -o UpToDateBot


FROM alpine:latest as uptodatebot
LABEL maintainer="Prithvi Vishak &lt;prithvi@example.com&gt;"


COPY --from=buildcontainer /build/uptodatebot/UpToDateBot /
RUN apk add --no-cache gcompat


WORKDIR /etc/uptodatebot
CMD [ "/UpToDateBot" ]</code></div></p>


<p class="article-paragraph">
As usual, this article is mostly for my reference. If you landed here after your hundredth frenzied search of the internet for ways to solve an issue you're having, I hope this helped.
</p>
</description>
<author>Prithvi Vishak</author>
</item>
<item>
<title>
My First Experiences with x86 Assembly + Some speed tests
</title>
<link>
https://mysorelug.indriyallc.net/articles/2021/12/assembly-thoughts/index.html
</link>
<description>
<p class="article-paragraph">
I've been into computers and coding for a couple years now. I can manage some Python, Go, and C++ (Arduino), configure our home network, and maintain this website.
One thing that I had been meaning to explore was some of the more low-level stuff.
I chose to learn assembly because I heard it was <em>the</em> way to get the most out of your hardware, it teaches you a lot about the workings of your computer, and... all the cool kids are doing it.
</p>


<p class="article-paragraph">
This article talks about how I started and what I've learnt. This is not a tutorial, but simply a chronicle of my experiences for the amusement of readers.
</p>


<h3 class="article-heading1">How I started</h3>


<p class="article-paragraph">
I searched the internet for <b>getting started with x86 assembly</b>.
A good number of tutorials I found simply gave you the program for hello world, <em>maybe</em> explained each line, and left you.
I eventually found <a href="https://www.secureideas.com/blog/2021/05/linux-x86-assembly-how-to-build-a-hello-world-program-in-gas.html">this tutorial from SecureIdeas</a> and <a href="https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html">this paper from Yale</a>.
The first was a good introductory tutorial, and the second a useful reference while writing my own programs.
</p>


<p class="article-paragraph">
Understanding the hello world program was fairly straightforward, and I felt confident enough to do something myself.
I decided to write a program that would print an integer out as a string to <code>STDOUT</code>. I planned to do this by repeatedly dividing the number in question by 10 to get the next least significant digit as the remainder. Printing the ASCII character corresponding to the remainder simply meant adding 48 to it. Simple enough, right?
</p>


<p class="article-paragraph">
I am still exploring different ways to do things, and the stack sounded like something fun to use. So, I decided to do all the division in one loop, pushing the digit values onto the stack one by one, then popping them and printing them in another.
</p>


<p class="article-paragraph">
Here's how my code came out:
</p>


<p class="article-paragraph"><div class="article-code"><code>.data
n:
        .long 192
digs:
        .long 0
char:
        .ascii ""


.global _start


.text




printInt:
        movl $10,%ecx
        xor %edx,%edx # CLEAR REGISTERS. Learnt this the hard way.
        idivl %ecx
        addl $48,%edx
        push %edx
        incl digs
        movl %eax,n


        cmpl $0,%eax
        ja printInt


printChars:
        pop char


        mov $4,%eax
        mov $1,%ebx
        mov $char,%ecx
        mov $1,%edx
        int $0x80


        decl digs
        movl digs,%eax
        cmpl $0,%eax
        ja printChars
        
        mov $4,%eax
        mov $1,%ebx
        mov $0xa,%ecx
        mov $1,%edx
        int $0x80


        ret


exit:
        mov $1,%eax
        mov $0,%ebx
        int $0x80
        ret


_start:
        movl n,%eax
        call printInt
        call exit</code></div></p>


<p class="article-paragraph">
It most definitely did work, but it took me the better part of a day. Why? Random floating point exceptions, segmentation faults, and infinite loops.
I could have used a debugger, but setting it up would probably have taken longer than my method of just moving the exit syscall until I found which line was erroring out.
</p>


<p class="article-paragraph">
Going through the <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html">official Intel documentation</a> was actually quite helpful, contrary to what some people online say. If only there was less cruft in x86 so I wouldn't have to spend time figuring out gems like <code>jnbe</code> (seriously, "Jump if not below or equal to"? It even has the same opcode as 'ja').
</p>


<p class="article-paragraph">
Since I eventually got this working, I thought it would be interesting to see exactly how much faster an assembly program would be against an equivalent C and Python program.
I decided on bubble-sorting 1000 integers.
</p>


<p class="article-paragraph">
Here's the Python:
</p>


<p class="article-paragraph"><div class="article-code"><code>l = [77, 55, 91 ... ]
sorted = False


while not sorted:
    sorted = True
    for i in range(len(l)-1):
        if l[i] &gt; l[i+1]:
            l[i], l[i+1] = l[i+1], l[i]
            sorted = False


print(l)</code></div></p>


<p class="article-paragraph">
And the C:
</p>


<p class="article-paragraph"><div class="article-code"><code>#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;


#define size 1000


int arr[size] = {77, 55, 91 ... }


int main() {
        bool sorted = false;
        while (!sorted) {
                sorted = true;
                for (int i=0; i<size-1; i++) {
                        if (arr[i] >gt; arr[i+1]) {
                                int temp = arr[i+1];
                                arr[i+1] = arr[i];
                                arr[i] = temp;
                                sorted = false;
                        }
                }
        }


        for (int i=0; i&lt;size; i++) {
                printf("%d\n", arr[i]);
        }
        return 0;
}</code></div></p>


<p class="article-paragraph">
And finally the assembly:
</p>


<p class="article-paragraph"><div class="article-code"><code>.data


array:
        .long 72, 55, 91 ...
len:
        .long 0
sorted:
        .byte 0


.global _start


.text
.include "intToChar.asm"


_start:
        lea len,%eax
        subl $array,%eax
        subl $4,%eax
        movl %eax,len


while:
        lea array,%eax
        movl $1,sorted
for:
        movl %eax,%ebx
        addl $4,%ebx
        movl (%eax),%ecx
        movl (%ebx),%edx
        cmpl %edx,%ecx
        jbe afterSwap


        movl $0,sorted        
        movl %ecx,(%ebx)
        movl %edx,(%eax)
afterSwap:
        addl $4,%eax
        mov %eax,%ecx
        lea array,%ebx
        subl %ebx,%ecx
        cmpl len,%ecx        
        jne for


        mov sorted,%ebx
        cmpl $0,%ebx
        jz while


        lea array,%ebx
printFinal:
        movl (%ebx),%eax
        push %ebx
        call printInt
        pop %ebx


        movl %ebx,%ecx
        lea array,%eax
        subl %eax,%ecx
        addl $4,%ebx
        cmp %ecx,len
        ja printFinal


        call exit</code></div></p>


<p class="article-paragraph">
As you may have noticed, there are small differences in the programs (like calculation of length, or process of printing result), but they seemed similar enough to get a ballpark estimate of their speeds.
</p>


<p class="article-paragraph">
Python took around 270 milliseconds each run.
</p>


<p class="article-paragraph"><div class="article-code"><code>~$ time python3 bubbleSort.py &gt; /dev/null
________________________________________________________
Executed in  272.48 millis    fish           external
   usr time  268.60 millis  995.00 micros  267.60 millis
   sys time    3.99 millis    0.00 micros    3.99 millis</code></div></p>


<p class="article-paragraph">
Unsurprising, considering that it has to start an interpreter first. The fact that python runs, well, slow doesn't help.
</p>


<p class="article-paragraph">
C compiled for 32-bit took around 5-8 milliseconds on average. Compiling for 64-bit made it take 4-8 milliseconds.
</p>


<p class="article-paragraph"><div class="article-code"><code>~$ gcc -m32 bubbleSort.c -o bubbleSortInC
~$ time ./bubbleSortInC &gt; /dev/null
________________________________________________________
Executed in    5.70 millis    fish           external
   usr time    5.63 millis  367.00 micros    5.26 millis
   sys time    0.14 millis  136.00 micros    0.00 millis</code></div></p>


<p class="article-paragraph">
Finally, assembly took about the same amount of time or <em>longer</em> than vanilla C, at around 5-10 milliseconds.
</p>


<p class="article-paragraph"><div class="article-code"><code>~$ as --march=i386 --32 bubbleSort.asm -o bubbleSort.o && ld -m elf_i386 bubbleSort.o -o bubbleSort
~$ time ./bubbleSort &gt; /dev/null
________________________________________________________
Executed in    5.74 millis    fish           external
   usr time    3.01 millis  334.00 micros    2.68 millis
   sys time    2.80 millis  125.00 micros    2.68 millis</code></div></p>


<p class="article-paragraph">
I hypothesized that the uncompetitive times from assembly were due to the number of syscalls I was making while printing the result. Sure enough, I was right.
Sorting without printing the results took 2-4 milliseconds in assembly. To compare, sorting without printing still took 5-8 milliseconds in C.
</p>


<p class="article-paragraph">
Interesting.
</p>


<p class="article-paragraph">
Anyway, that's all I have for today. Will I continue to use assembly? Probably. Will I continue to have hair? At this rate, probably not.
</p>
</description>
<author> Prithvi Vishak</author>
</item>
</channel>
</rss>